int MaxCaptureValuePawnX(CHESSB c, int x, int y){
    assert(c[x][y]);
    assert(c[x][y]->Charac==0);
    int d =-1;
    int x_d = x;
    if(x+1>=0 && x+1<=7){
        if(y+1>=0 && y+1<=7){
            if(c[x+1][y+1] && c[x+1][y+1]->Color!=c[x][y]->Color){
                if(c[x+1][y+1]->Charac>d){
                    d=c[x+1][y+1]->Charac;
                    x_d=x+1;
                }
            }
        }
    }
    else if(x-1>=0 && x-1<=7){
        if(y+1>=0 && y+1<=7){
            if(c[x-1][y+1] && c[x-1][y+1]->Color!=c[x][y]->Color){
                if(c[x-1][y+1]->Charac>d){
                    d=c[x-1][y+1]->Charac;
                    x_d=x-1;
                }
            }
        }
    }
    return x_d;

}
int MaxCaptureValuePawnY(CHESSB c, int x, int y){
    assert(c[x][y]);
    assert(c[x][y]->Charac==0);
    int d =-1;
    int y_d = y;
    if(x+1>=0 && x+1<=7){
        if(y+1>=0 && y+1<=7){
            if(c[x+1][y+1] && c[x+1][y+1]->Color!=c[x][y]->Color){
                if(c[x+1][y+1]->Charac>d){
                    d=c[x+1][y+1]->Charac;
                    y_d=y+1;
                }
            }
        }
    }
    else if(x-1>=0 && x-1<=7){
        if(y+1>=0 && y+1<=7){
            if(c[x-1][y+1] && c[x-1][y+1]->Color!=c[x][y]->Color){
                if(c[x-1][y+1]->Charac>d){
                    d=c[x-1][y+1]->Charac;
                    y_d=y+1;
                }
            }
        }
    }
    return y_d;

}
